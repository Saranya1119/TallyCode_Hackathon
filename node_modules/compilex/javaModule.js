// var exec  = require('child_process').exec;
// var fs = require('fs');
// var cuid = require('cuid');
// var colors = require('colors');


// exports.stats = false ;

// exports.compileJava = function (envData , code , fn ){
// 	//creating source file
//     var dirname = cuid.slug();
// 	path = './temp/'+dirname;

// 	fs.mkdir(path , 0777 , function(err){	
// 		if(err && exports.stats)
// 		console.log(err.toString().red);
// 		else
// 		{
// 			fs.writeFile( path  + "/Main.java" , code  , function(err ){			
// 				if(err && exports.stats)
// 					console.log('ERROR: '.red + err);
// 			    else
// 			    {
// 			    	if(exports.stats)
// 			    		console.log('INFO: '.green + path + "/Main.java created");				    	
			    	
// 			    	if(envData.OS === "windows")
// 						var command = "cd "+path+ " & " + " javac Main.java";
// 					exec(command , function( error , stdout , stderr ){
// 						if(error)
// 						{
// 							if(exports.stats)							
// 								console.log("INFO: ".green + path + "/Main.java contained an error while compiling");
// 							var out = {error : stderr };
// 							fn(out);
// 						}
// 						else
// 						{
// 							console.log("INFO: ".green + "compiled a java file");
// 							var command = "cd "+path+" & java Main";
// 							exec(command , function( error , stdout , stderr ){
// 								if(error)
// 								{
												
// 									if(error.toString().indexOf('Error: stdout maxBuffer exceeded.') != -1)
// 									{
// 										var out = { error : 'Error: stdout maxBuffer exceeded. You might have initialized an infinite loop.'};
// 										fn(out);
// 									}
// 									else
// 									{
// 										if(exports.stats)
// 										{
// 											console.log('INFO: '.green + path  + '/Main.java contained an error while executing');
// 										}										
// 										var out = { error : stderr};
// 										fn(out);
// 									}	
// 								}
// 								else
// 								{						
// 									if(exports.stats)
// 									{
// 										console.log('INFO: '.green + path + '/Main.java successfully compiled and executed !');
// 									}
// 									var out = { output : stdout};
// 									fn(out);										
// 								}
// 							});		
// 						}
// 					});
// 			    }		   
// 			});					
// 		}
// 	});
// }



// exports.compileJavaWithInput = function (envData , code , input , fn ){
// 	//creating source file
//     var dirname = cuid.slug();
// 	path = './temp/'+dirname;

// 	fs.mkdir(path , 0777 , function(err){	
// 		if(err && exports.stats)
// 		console.log(err.toString().red);
// 		else
// 		{
// 			fs.writeFile( path  + "/Main.java" , code  , function(err ){			
// 				if(err && exports.stats)
// 					console.log('ERROR: '.red + err);
// 			    else
// 			    {
// 			    	if(exports.stats)
// 			    		console.log('INFO: '.green + path + "/Main.java created");				    	
// 			    	fs.writeFile( path + "/input.txt" , input , function (err){
// 			    		if(err && exports.stats)
// 							console.log('ERROR: '.red + err);
// 						else
// 						{
// 							if(envData.OS === "windows")
// 							var command = "cd "+path+ " & " + " javac Main.java";
// 							exec(command , function( error , stdout , stderr ){						
// 								if(error)
// 								{
// 									if(exports.stats)							
// 										console.log("INFO: ".green + path + "/Main.java contained an error while compiling");
// 									var out = {error :  stderr };
// 									fn(out);
// 								}
// 								else
// 								{
// 									console.log("INFO: ".green + "compiled a java file");
// 									var command = "cd "+path+" & java Main < input.txt";
// 									exec(command , function( error , stdout , stderr ){
// 										if(error)
// 										{
											
// 											if(exports.stats)
// 											{
// 												console.log('INFO: '.green + path  + '/Main.java contained an error while executing');
// 											}			
// 											if(error.toString().indexOf('Error: stdout maxBuffer exceeded.') != -1)
// 											{
// 												var out = { error : 'Error: stdout maxBuffer exceeded. You might have initialized an infinite loop.'};
// 												fn(out);
// 											}
// 											else
// 											{
// 												var out = { error : stderr};
// 												fn(out);
// 											}	
// 										}
// 										else
// 										{						
// 											if(exports.stats)
// 											{
// 												console.log('INFO: '.green + path + '/Main.java successfully compiled and executed !');
// 											}
// 											var out = { output : stdout};
// 											fn(out);										
// 										}
// 									});		
// 								}
// 			    			});
// 			    		}
// 					});
// 			    }		   
// 			});					
// 		}
// 	});
// }












// const exec = require('child_process').exec;
// const fs = require('fs');
// const cuid = require('cuid');
// const colors = require('colors');

// exports.stats = false;

// exports.compileJava = function (envData, code, fn) {
//     // Creating source file
//     const dirname = cuid.slug();
//     const path = './temp/' + dirname;

//     fs.mkdir(path, { mode: 0o777 }, function (err) {
//         if (err && exports.stats) console.log(err.toString().red);
//         else {
//             fs.writeFile(path + "/Main.java", code, function (err) {
//                 if (err && exports.stats) console.log('ERROR: '.red + err);
//                 else {
//                     if (exports.stats)
//                         console.log('INFO: '.green + path + "/Main.java created");

//                     const command = envData.OS === "windows"
//                         ? `cd ${path} & javac Main.java`
//                         : `cd ${path} && javac Main.java`;

//                     exec(command, function (error, stdout, stderr) {
//                         if (error) {
//                             if (exports.stats) console.log("INFO: ".green + path + "/Main.java contained an error while compiling");
//                             const out = { error: stderr };
//                             fn(out);
//                         } else {
//                             console.log("INFO: ".green + "Compiled a Java file");
//                             const command = envData.OS === "windows"
//                                 ? `cd ${path} & java Main`
//                                 : `cd ${path} && java Main`;

//                             exec(command, function (error, stdout, stderr) {
//                                 if (error) {
//                                     if (error.toString().indexOf('Error: stdout maxBuffer exceeded.') !== -1) {
//                                         const out = { error: 'Error: stdout maxBuffer exceeded. You might have initialized an infinite loop.' };
//                                         fn(out);
//                                     } else {
//                                         if (exports.stats) {
//                                             console.log('INFO: '.green + path + '/Main.java contained an error while executing');
//                                         }
//                                         const out = { error: stderr };
//                                         fn(out);
//                                     }
//                                 } else {
//                                     if (exports.stats) {
//                                         console.log('INFO: '.green + path + '/Main.java successfully compiled and executed!');
//                                     }
//                                     const out = { output: stdout };
//                                     fn(out);
//                                 }
//                             });
//                         }
//                     });
//                 }
//             });
//         }
//     });
// }

// exports.compileJavaWithInput = function (envData, code, input, fn) {
//     // Creating source file
//     const dirname = cuid.slug();
//     const path = './temp/' + dirname;

//     fs.mkdir(path, { mode: 0o777 }, function (err) {
//         if (err && exports.stats) console.log(err.toString().red);
//         else {
//             fs.writeFile(path + "/Main.java", code, function (err) {
//                 if (err && exports.stats) console.log('ERROR: '.red + err);
//                 else {
//                     if (exports.stats)
//                         console.log('INFO: '.green + path + "/Main.java created");

//                     fs.writeFile(path + "/input.txt", input, function (err) {
//                         if (err && exports.stats) console.log('ERROR: '.red + err);
//                         else {
//                             const command = envData.OS === "windows"
//                                 ? `cd ${path} & javac Main.java`
//                                 : `cd ${path} && javac Main.java`;

//                             exec(command, function (error, stdout, stderr) {
//                                 if (error) {
//                                     if (exports.stats) console.log("INFO: ".green + path + "/Main.java contained an error while compiling");
//                                     const out = { error: stderr };
//                                     fn(out);
//                                 } else {
//                                     console.log("INFO: ".green + "Compiled a Java file");
//                                     const command = envData.OS === "windows"
//                                         ? `cd ${path} & java Main < input.txt`
//                                         : `cd ${path} && java Main < input.txt`;

//                                     exec(command, function (error, stdout, stderr) {
//                                         if (error) {
//                                             if (exports.stats) {
//                                                 console.log('INFO: '.green + path + '/Main.java contained an error while executing');
//                                             }
//                                             if (error.toString().indexOf('Error: stdout maxBuffer exceeded.') !== -1) {
//                                                 const out = { error: 'Error: stdout maxBuffer exceeded. You might have initialized an infinite loop.' };
//                                                 fn(out);
//                                             } else {
//                                                 const out = { error: stderr };
//                                                 fn(out);
//                                             }
//                                         } else {
//                                             if (exports.stats) {
//                                                 console.log('INFO: '.green + path + '/Main.java successfully compiled and executed!');
//                                             }
//                                             const out = { output: stdout };
//                                             fn(out);
//                                         }
//                                     });
//                                 }
//                             });
//                         }
//                     });
//                 }
//             });
//         }
//     });
// }











// const exec = require('child_process').exec;
// const fs = require('fs');
// const path = require('path');
// const cuid = require('cuid');
// const colors = require('colors');

// exports.stats = false;

// function cleanUp(tempPath) {
//     fs.rmdir(tempPath, { recursive: true }, (err) => {
//         if (err && exports.stats) console.log('ERROR: '.red + err);
//         else if (exports.stats) console.log('INFO: '.green + 'Cleaned up temporary files in ' + tempPath);
//     });
// }

// exports.compileJava = function (envData, code, fn) {
//     // Creating source file
//     const dirname = cuid.slug();
//     const tempPath = path.join('./temp', dirname);

//     fs.mkdir(tempPath, { mode: 0o777 }, function (err) {
//         if (err && exports.stats) console.log(err.toString().red);
//         else {
//             fs.writeFile(path.join(tempPath, "Main.java"), code, function (err) {
//                 if (err && exports.stats) console.log('ERROR: '.red + err);
//                 else {
//                     if (exports.stats)
//                         console.log('INFO: '.green + path.join(tempPath, "Main.java") + " created");

//                     const compileCommand = envData.OS === "windows"
//                         ? `cd ${tempPath} & javac Main.java`
//                         : `cd ${tempPath} && javac Main.java`;

//                     exec(compileCommand, function (error, stdout, stderr) {
//                         if (error) {
//                             if (exports.stats)
//                                 console.log("INFO: ".green + path.join(tempPath, "Main.java") + " contained an error while compiling");
//                             const out = { error: stderr };
//                             cleanUp(tempPath);
//                             fn(out);
//                         } else {
//                             console.log("INFO: ".green + "Compiled a Java file");
//                             const execCommand = envData.OS === "windows"
//                                 ? `cd ${tempPath} & java Main`
//                                 : `cd ${tempPath} && java Main`;

//                             exec(execCommand, function (error, stdout, stderr) {
//                                 if (error) {
//                                     if (error.toString().indexOf('Error: stdout maxBuffer exceeded.') !== -1) {
//                                         const out = { error: 'Error: stdout maxBuffer exceeded. You might have initialized an infinite loop.' };
//                                         cleanUp(tempPath);
//                                         fn(out);
//                                     } else {
//                                         if (exports.stats) {
//                                             console.log('INFO: '.green + path.join(tempPath, "Main.java") + ' contained an error while executing');
//                                         }
//                                         const out = { error: stderr };
//                                         cleanUp(tempPath);
//                                         fn(out);
//                                     }
//                                 } else {
//                                     if (exports.stats) {
//                                         console.log('INFO: '.green + path.join(tempPath, "Main.java") + ' successfully compiled and executed!');
//                                     }
//                                     const out = { output: stdout };
//                                     cleanUp(tempPath);
//                                     fn(out);
//                                 }
//                             });
//                         }
//                     });
//                 }
//             });
//         }
//     });
// }

// exports.compileJavaWithInput = function (envData, code, input, fn) {
//     // Creating source file
//     const dirname = cuid.slug();
//     const tempPath = path.join('./temp', dirname);

//     fs.mkdir(tempPath, { mode: 0o777 }, function (err) {
//         if (err && exports.stats) console.log(err.toString().red);
//         else {
//             fs.writeFile(path.join(tempPath, "Main.java"), code, function (err) {
//                 if (err && exports.stats) console.log('ERROR: '.red + err);
//                 else {
//                     if (exports.stats)
//                         console.log('INFO: '.green + path.join(tempPath, "Main.java") + " created");

//                     fs.writeFile(path.join(tempPath, "input.txt"), input, function (err) {
//                         if (err && exports.stats) console.log('ERROR: '.red + err);
//                         else {
//                             const compileCommand = envData.OS === "windows"
//                                 ? `cd ${tempPath} & javac Main.java`
//                                 : `cd ${tempPath} && javac Main.java`;

//                             exec(compileCommand, function (error, stdout, stderr) {
//                                 if (error) {
//                                     if (exports.stats)
//                                         console.log("INFO: ".green + path.join(tempPath, "Main.java") + " contained an error while compiling");
//                                     const out = { error: stderr };
//                                     cleanUp(tempPath);
//                                     fn(out);
//                                 } else {
//                                     console.log("INFO: ".green + "Compiled a Java file");
//                                     const execCommand = envData.OS === "windows"
//                                         ? `cd ${tempPath} & java Main < input.txt`
//                                         : `cd ${tempPath} && java Main < input.txt`;

//                                     exec(execCommand, function (error, stdout, stderr) {
//                                         if (error) {
//                                             if (exports.stats) {
//                                                 console.log('INFO: '.green + path.join(tempPath, "Main.java") + ' contained an error while executing');
//                                             }
//                                             if (error.toString().indexOf('Error: stdout maxBuffer exceeded.') !== -1) {
//                                                 const out = { error: 'Error: stdout maxBuffer exceeded. You might have initialized an infinite loop.' };
//                                                 cleanUp(tempPath);
//                                                 fn(out);
//                                             } else {
//                                                 const out = { error: stderr };
//                                                 cleanUp(tempPath);
//                                                 fn(out);
//                                             }
//                                         } else {
//                                             if (exports.stats) {
//                                                 console.log('INFO: '.green + path.join(tempPath, "Main.java") + ' successfully compiled and executed!');
//                                             }
//                                             const out = { output: stdout };
//                                             cleanUp(tempPath);
//                                             fn(out);
//                                         }
//                                     });
//                                 }
//                             });
//                         }
//                     });
//                 }
//             });
//         }
//     });
// }












const exec = require('child_process').exec;
const fs = require('fs');
const path = require('path');
const cuid = require('cuid');
const colors = require('colors');

exports.stats = false;

function cleanUp(tempPath) {
    fs.rmdir(tempPath, { recursive: true }, (err) => {
        if (err && exports.stats) console.log('ERROR: '.red + err);
        else if (exports.stats) console.log('INFO: '.green + 'Cleaned up temporary files in ' + tempPath);
    });
}

exports.compileJava = function (envData, code, fn) {
    // Creating source file
    const dirname = cuid.slug();
    const tempPath = path.join('./temp', dirname);

    fs.mkdir(tempPath, { mode: 0o777 }, function (err) {
        if (err && exports.stats) console.log(err.toString().red);
        else {
            fs.writeFile(path.join(tempPath, "Main.java"), code, function (err) {
                if (err && exports.stats) console.log('ERROR: '.red + err);
                else {
                    if (exports.stats)
                        console.log('INFO: '.green + path.join(tempPath, "Main.java") + " created");

                    const compileCommand = envData.OS === "windows"
                        ? `cd ${tempPath} & javac Main.java`
                        : `cd ${tempPath} && javac Main.java`;

                    exec(compileCommand, function (error, stdout, stderr) {
                        if (error) {
                            if (exports.stats)
                                console.log("INFO: ".green + path.join(tempPath, "Main.java") + " contained an error while compiling");
                            const out = { error: stderr || error.message };
                            cleanUp(tempPath);
                            fn(out);
                        } else {
                            console.log("INFO: ".green + "Compiled a Java file");
                            const execCommand = envData.OS === "windows"
                                ? `cd ${tempPath} & java Main`
                                : `cd ${tempPath} && java Main`;

                            exec(execCommand, function (error, stdout, stderr) {
                                if (error) {
                                    if (error.toString().indexOf('Error: stdout maxBuffer exceeded.') !== -1) {
                                        const out = { error: 'Error: stdout maxBuffer exceeded. You might have initialized an infinite loop.' };
                                        cleanUp(tempPath);
                                        fn(out);
                                    } else {
                                        if (exports.stats) {
                                            console.log('INFO: '.green + path.join(tempPath, "Main.java") + ' contained an error while executing');
                                        }
                                        const out = { error: stderr || error.message };
                                        cleanUp(tempPath);
                                        fn(out);
                                    }
                                } else {
                                    if (exports.stats) {
                                        console.log('INFO: '.green + path.join(tempPath, "Main.java") + ' successfully compiled and executed!');
                                    }
                                    const out = { output: stdout };
                                    cleanUp(tempPath);
                                    fn(out);
                                }
                            });
                        }
                    });
                }
            });
        }
    });
}

exports.compileJavaWithInput = function (envData, code, input, fn) {
    // Creating source file
    const dirname = cuid.slug();
    const tempPath = path.join('./temp', dirname);

    fs.mkdir(tempPath, { mode: 0o777 }, function (err) {
        if (err && exports.stats) console.log(err.toString().red);
        else {
            fs.writeFile(path.join(tempPath, "Main.java"), code, function (err) {
                if (err && exports.stats) console.log('ERROR: '.red + err);
                else {
                    if (exports.stats)
                        console.log('INFO: '.green + path.join(tempPath, "Main.java") + " created");

                    fs.writeFile(path.join(tempPath, "input.txt"), input, function (err) {
                        if (err && exports.stats) console.log('ERROR: '.red + err);
                        else {
                            const compileCommand = envData.OS === "windows"
                                ? `cd ${tempPath} & javac Main.java`
                                : `cd ${tempPath} && javac Main.java`;

                            exec(compileCommand, function (error, stdout, stderr) {
                                if (error) {
                                    if (exports.stats)
                                        console.log("INFO: ".green + path.join(tempPath, "Main.java") + " contained an error while compiling");
                                    const out = { error: stderr || error.message };
                                    cleanUp(tempPath);
                                    fn(out);
                                } else {
                                    console.log("INFO: ".green + "Compiled a Java file");
                                    const execCommand = envData.OS === "windows"
                                        ? `cd ${tempPath} & java Main < input.txt`
                                        : `cd ${tempPath} && java Main < input.txt`;

                                    exec(execCommand, function (error, stdout, stderr) {
                                        if (error) {
                                            if (exports.stats) {
                                                console.log('INFO: '.green + path.join(tempPath, "Main.java") + ' contained an error while executing');
                                            }
                                            if (error.toString().indexOf('Error: stdout maxBuffer exceeded.') !== -1) {
                                                const out = { error: 'Error: stdout maxBuffer exceeded. You might have initialized an infinite loop.' };
                                                cleanUp(tempPath);
                                                fn(out);
                                            } else {
                                                const out = { error: stderr || error.message };
                                                cleanUp(tempPath);
                                                fn(out);
                                            }
                                        } else {
                                            if (exports.stats) {
                                                console.log('INFO: '.green + path.join(tempPath, "Main.java") + ' successfully compiled and executed!');
                                            }
                                            const out = { output: stdout };
                                            cleanUp(tempPath);
                                            fn(out);
                                        }
                                    });
                                }
                            });
                        }
                    });
                }
            });
        }
    });
}
